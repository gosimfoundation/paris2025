---
import { Icon } from 'astro-icon/components'
import speakersData from '~/data/db/gosim-speakers.json';

const { days } = Astro.props;

const getSpeaker = (id) => speakersData.speakers.find(s => s.id === id);
---

<section class="aliased dark:bg-gray-900 p-0">
  <div class="mx-auto max-w-screen-xl px-4 py-8 sm:py-16 lg:px-6 lg:py-4">
    <div class="mt-8 lg:mt-12">
      <!-- Day Tabs -->
      <div class="flex flex-wrap justify-center gap-2" role="tablist" aria-label="Days">
        {days.map((day, index) => (
          <button
            role="tab"
            aria-selected={index === 0 ? "true" : "false"}
            data-day-id={day.id}
            class={`px-4 py-2 rounded-3xl text-sm font-medium transition-colors
                ${index === 0
                ? 'bg-blue-600 text-white'
                : 'text-gray-500 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-800'}`}
            >
            {day.title}
          </button>
        ))}
      </div>

      <!-- Day Panels -->
      <div class="mt-6">
        {days.map((day, dayIndex) => (
          <div
            role="tabpanel"
            data-panel-id={day.id}
            class={`px-4 py-4 md:px-6 lg:px-8 rounded-lg border border-gray-100 bg-gray-50 dark:border-gray-700 dark:bg-gray-800
              ${dayIndex === 0 ? 'block' : 'hidden'}`}
          >
            <!-- Track Tabs -->
            <div class="flex flex-wrap justify-center gap-2 mb-6" role="tablist" aria-label="Tracks">
              {day.tracks.map((track, trackIndex) => (
                <button
                  role="tab"
                  aria-selected={trackIndex === 0 ? "true" : "false"}
                  data-track-id={track.id}
                  data-day-id={day.id}
                  class={`px-3 py-1.5 rounded-lg text-sm font-medium transition-colors
                      ${trackIndex === 0
                      ? 'bg-indigo-600 text-white'
                      : 'text-gray-600 bg-gray-200 hover:bg-gray-300 dark:text-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600'}`}
                  >
                  {track.title}
                </button>
              ))}
            </div>

            <!-- Track Panels -->
            <div class="mt-4">
              {day.tracks.map((track, trackIndex) => (
                <div
                  role="tabpanel"
                  data-track-panel-id={`${day.id}-${track.id}`}
                  class={`${trackIndex === 0 ? 'block' : 'hidden'}`}
                >
                  <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                    {track.events.map(event => (
                      <article class="p-4 space-y-3 bg-white rounded-md border border-gray-200 shadow-sm dark:bg-gray-800 dark:border-gray-700">
                        <div class="flex items-center gap-2 text-sm font-medium text-blue-600 dark:text-blue-400">
                          <Icon name="tabler:clock" class="w-4 h-4" />
                          <span>{event.time}</span>
                        </div>

                        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                          {event.title}
                        </h3>

                        {/* Event Description */}
                        {event.description && (
                          <p class="text-gray-500 dark:text-gray-400 text-sm leading-relaxed">
                            {event.description}
                          </p>
                        )}

                        {/* Speakers Section */}
                        {event.speakers?.length > 0 && (
                          <div class="space-y-4 mt-3">
                            {event.speakers.map(speakerId => {
                              const speaker = getSpeaker(speakerId);
                              return speaker ? (
                                <div class="flex items-center gap-3">
                                  <img
                                    src={speaker.avatar}
                                    alt={speaker.name}
                                    class="w-12 h-12 rounded-full object-cover"
                                    loading="lazy"
                                  />
                                  <div>
                                    <p class="text-gray-900 dark:text-white">{speaker.name}</p>
                                    <p class="text-sm text-gray-500 dark:text-gray-400">{speaker.role}</p>
                                  </div>
                                </div>
                              ) : (
                                <div class="flex items-center gap-3">
                                  <div class="w-12 h-12 rounded-full bg-gray-200 dark:bg-gray-700"></div>
                                  <div>
                                    <p class="text-gray-900 dark:text-white">Unknown Speaker</p>
                                    <p class="text-sm text-gray-500 dark:text-gray-400">Speaker not found</p>
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        )}
                      </article>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>

    <div class="mt-8 text-center">
<!--       <a
        href="#"
        class="inline-flex items-center text-lg font-medium text-blue-600 hover:underline dark:text-blue-500"
      >
        Buy tickets
        <Icon name="tabler:arrow-right" class="ml-2 h-5 w-5" />
      </a> -->
    </div>
  </div>

  <script is:inline>
    // Wait for document to be fully loaded
    document.addEventListener('DOMContentLoaded', () => {
      // Set up tab navigation system
      const setupTabs = () => {
        // Day tab navigation
        const dayTabs = document.querySelectorAll('[role="tab"][data-day-id]');

        const selectDayTab = (selectedTab) => {
          const dayId = selectedTab.dataset.dayId;

          // Update all day tabs
          dayTabs.forEach(tab => {
            // Reset styles for all tabs
            tab.classList.remove('bg-blue-600', 'text-white');
            tab.classList.add('text-gray-500', 'dark:text-gray-400', 'hover:bg-gray-100', 'dark:hover:bg-gray-800');
            tab.setAttribute('aria-selected', 'false');
          });

          // Style the selected tab
          selectedTab.classList.add('bg-blue-600', 'text-white');
          selectedTab.classList.remove('text-gray-500', 'dark:text-gray-400', 'hover:bg-gray-100', 'dark:hover:bg-gray-800');
          selectedTab.setAttribute('aria-selected', 'true');

          // Update panels
          const dayPanels = document.querySelectorAll('[role="tabpanel"][data-panel-id]');
          dayPanels.forEach(panel => panel.classList.add('hidden'));

          // Show selected panel
          const selectedPanel = document.querySelector(`[data-panel-id="${dayId}"]`);
          if (selectedPanel) {
            selectedPanel.classList.remove('hidden');

            // Auto-select first track
            const firstTrackTab = selectedPanel.querySelector('[role="tab"][data-track-id]');
            if (firstTrackTab) {
              selectTrackTab(firstTrackTab);
            }
          }
        };

        // Add event listeners to day tabs
        dayTabs.forEach(tab => {
          tab.addEventListener('click', () => selectDayTab(tab));
        });

        // Track tab navigation
        const selectTrackTab = (selectedTab) => {
          const trackId = selectedTab.dataset.trackId;
          const dayId = selectedTab.dataset.dayId;
          const combinedId = `${dayId}-${trackId}`;

          // Get current day panel
          const currentDayPanel = document.querySelector(`[data-panel-id="${dayId}"]`);
          if (!currentDayPanel) return;

          // Update track tabs within this day
          const trackTabs = currentDayPanel.querySelectorAll('[role="tab"][data-track-id]');
          trackTabs.forEach(tab => {
            tab.classList.remove('bg-indigo-600', 'text-white');
            tab.classList.add('text-gray-600', 'bg-gray-200', 'dark:text-gray-300', 'dark:bg-gray-700', 'hover:bg-gray-300', 'dark:hover:bg-gray-600');
            tab.setAttribute('aria-selected', 'false');
          });

          // Style selected track tab
          selectedTab.classList.add('bg-indigo-600', 'text-white');
          selectedTab.classList.remove('text-gray-600', 'bg-gray-200', 'hover:bg-gray-300', 'dark:text-gray-300', 'dark:bg-gray-700', 'dark:hover:bg-gray-600');
          selectedTab.setAttribute('aria-selected', 'true');

          // Update track panels
          const trackPanels = currentDayPanel.querySelectorAll('[role="tabpanel"][data-track-panel-id]');
          trackPanels.forEach(panel => panel.classList.add('hidden'));

          // Show selected track panel
          const selectedTrackPanel = currentDayPanel.querySelector(`[data-track-panel-id="${combinedId}"]`);
          if (selectedTrackPanel) {
            selectedTrackPanel.classList.remove('hidden');
          }
        };

        // Add event listeners to track tabs
        document.querySelectorAll('[role="tab"][data-track-id]').forEach(tab => {
          tab.addEventListener('click', () => selectTrackTab(tab));
        });

        // Initialize the first day tab on page load
        if (dayTabs.length > 0) {
          selectDayTab(dayTabs[0]);
        }
      };

      // Initialize the tabs
      setupTabs();
    });
  </script>
</section>